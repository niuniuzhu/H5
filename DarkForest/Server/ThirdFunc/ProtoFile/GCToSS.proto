syntax = "proto3";
package GCToSS;

enum MsgNum
{
	unknow = 0;
	eMsgToGSToSSFromGC_Begin = 16384;
	eMsgToGSToSSFromGC_AskPingSS = 16385;
	eMsgToGSToSSFromGC_AskEnterBattle = 16386;
	eMsgToGSToSSFromGC_AskMoveDir = 16387;
	eMsgToGSToSSFromGC_AskStopMove = 16388;
	eMsgToGSToSSFromGC_AskBuyGoods = 16389;
	eMsgToGSToSSFromGC_AskUseGoods = 16390;
	eMsgToGSToSSFromGC_AskSellGoods= 16391;
	eMsgToGSToSSFromGC_AskMoveGoods = 16392;
	eMsgToGSToSSFromGC_ReportBattleLoadingState = 16393;
	eMsgToGSToSSFromGC_AskAttack = 16394;
	eMsgToGSToSSFromGC_AskUseSkill = 16395;
	eMsgToGSToSSFromGC_AskLockTarget = 16396;
	eMsgToGSToSSFromGC_ReportAltarStrawSolder = 16397;
	eMsgToGSToSSFromGC_AskAbsorbMonster = 16398;
	eMsgToGSToSSFromGC_AskCancelAbsorbSkill = 16399;
	eMsgToGSToSSFromGC_AskGasExplosion = 16400;
	eMsgToGSToSSFromGC_AskBuyRebornHero = 16401;
	eMsgToGSToSSFromGC_GMCmd = 16402;
	eMsgToGSToSSFromGC_AskOBBattle = 16403;
	eMsgToGSToSSFromGC_StepId = 16404;
	eMsgToGSToSSFromGC_AskBornNPC = 16405;
	eMsgToGSToSSFromGC_AskAutoAttack = 16406;
	eMsgToGSToSSFromGC_AskGuideEndJumpToHall = 16407;
	eMsgToGSToSSFromGC_AskReconnect = 16408;
	eMsgToGSToSSFromGC_AskMovePos = 16409;
	eMsgToGSToSSFromGC_AskAlwaysAutoAtk = 16410;
	eMsgToSSFromGS_ReportSSMsg= 16411;
	eMsgToSSFromGS_AskQuickBattleEnd = 16412;
	
	eMsgToGSToSSFromGC_AskTrySelectHero = 16505;
	eMsgToGSToSSFromGC_AskSelectHero = 16506;
	eMsgToGSToSSFromGC_AskSelectRunePage = 16507;
	eMsgToGSToSSFromGC_ReportLoadBattleComplete = 16520; 
	eMsgToGSToSSFromGC_AskHeroAttributesInfo = 16521;
	eMsgToGSToSSFromGC_AskHerosBattleInfo = 16522;
	//新手引导16540-16550
	eMsgToGSToSSFromGC_AskGuideStepComp = 16540; 
	eMsgToGSToSSFromGC_End = 17000;
}

//eMsgToGSToSSFromGC_AskGuideStepComp

message AskSSGuideStepComp
{
	MsgNum msgid = 1;  
	enum edotype{
			unknow = 0;
			ecomptask = 1;
			ebuygoods = 2; 
			ebornsolder = 3;
			ebornhero = 4;	
			nextstep = 5;		
	} 
	message taskinfo
	{
		edotype  dtype = 1; 
		int32  stepid = 2; 
	}
	repeated	taskinfo  info = 3;  
}

//eMsgToGSToSSFromGC_AskHerosBattleInfo
message HerosBattleInfo
{
	MsgNum msgid = 1;
}

//eMsgToGSToSSFromGC_AskHeroAttributesInfo
message AskHeroAttributesInfo
{
	MsgNum msgid = 1;
}

//eMsgToSSFromGS_AskQuickBattleEnd
message AskQuickBattleEnd
{
	MsgNum msgid = 1;
	int32  other = 2; 
}

message AskPingSS
{
MsgNum msgnum = 1;
int64 time = 2;
}

//已换EmsgToss_AskEnterBattle
//eMsgToGSToSSFromGC_AskEnterBattle
message AskEnterBattle
{
MsgNum msgnum = 1;
int64 clientTime = 2;
uint64 battleid = 3;
int32 obuserstate = 4;
}

//已换，同MoveDir
message Dir
{
float x = 1;
float z = 2;
float angle = 3;
}

//已换EmsgToss_AskMoveDir
//eMsgToGSToSSFromGC_AskMoveDir
message MoveDir
{
MsgNum msgnum = 1;

Dir dir = 3;
}

//已换EmsgToss_AskStopMove
//eMsgToGSToSSFromGC_AskStopMove
message StopMove
{
MsgNum msgnum = 1;
}

//已换EmsgToss_AskBuyGoods
//eMsgToGSToSSFromGC_AskBuyGoods
message BuyGoods
{
MsgNum msgnum = 1;
int32 typeid = 3;
}

//已换EmsgToss_AskUseGoods
//eMsgToGSToSSFromGC_AskUseGoods
message UseGoods
{
MsgNum msgnum = 1;
int32 goodspos = 3;
}

//已换EmsgToss_AskSellGoods
//eMsgToGSToSSFromGC_AskSellGoods
message SellGoods
{
MsgNum msgnum = 1;
int32 goodspos = 3;
}

//已换EmsgToss_AskMoveGoods
//eMsgToGSToSSFromGC_AskMoveGoods
message MoveGoods
{
MsgNum msgnum = 1;
int32 frompos = 3;
int32 topos=4;
}


message ReportBattleLoadingState
{
MsgNum msgnum = 1;
int32 loadingnum = 3;
}

//已换EmsgToss_AskUseSkill
//eMsgToGSToSSFromGC_AskUseSkill
message UseSkill
{
MsgNum msgnum = 1;
int32 skillid = 3;
}

//已换EmsgToss_AskLockTarget
//名不一致eMsgToGSToSSFromGC_AskLockTargt->eMsgToGSToSSFromGC_AskLockTarget
message LockTar
{
MsgNum msgnum = 1;
int64 guid = 3;
}

//已换EmsgToss_ReportAltarStrawSolder
//eMsgToGSToSSFromGC_ReportAltarStrawSolder
message ReportAltarStrawSolder
{
MsgNum msgnum = 1;
int32 type = 2;
int32 index = 3;
}

//已换EmsgToss_AskAbsorb
//eMsgToGSToSSFromGC_AskAbsorbMonster
message Absorb
{
MsgNum msgnum = 1;
int32 removeid = 2;
}

//已换AskGasExplosion
//协议名不一致eMsgToGSToCSFromGC_AskGasExplosion->eMsgToGSToSSFromGC_AskGasExplosion
message GasExplosion
{
MsgNum msgnum = 1;
}

//已换Resurrection
//eMsgToGSToSSFromGC_AskBuyRebornHero
message BuReborn
{
MsgNum msgnum = 1;
}

//已换EmsgToss_eMsgToGSToCSFromGC_GMCmd
//协议名不一致eMsgToGSToCSFromGC_GMCmd->eMsgToGSToSSFromGC_GMCmd
message GMCmd
{
MsgNum msgnum = 1;
string cmd = 2;
}

//已换EmsgToss_GuideFinishStep
//eMsgToGsToCSFromGC_GuideStep->eMsgToGSToSSFromGC_StepId
message StepID
{
MsgNum msgnum = 1;
int32 stepid = 3;
int32 type = 4;
}

//已换GameAutoFight
//eMsgToGSToSSFromGC_AskAutoAttack
message AutoAtk
{
MsgNum msgnum = 1;
}

//已换EmsgToss_FinishAllGuideToLobby
//eMsgToGSToSSFromGC_AskGuideEndJumpToHall
message GuideJumpToHall
{
MsgNum msgnum = 1;
}

//已换EmsgToss_AskReconnectInfo
//协议名不一致eMsgToGSToSSFromGC_AskReconnectInfo->eMsgToGSToSSFromGC_AskReconnect
message AskReconnect
{
MsgNum msgnum = 1;
}

message Pos
{
float x = 1;
float z = 2;
}
message MoveTar
{
MsgNum msgnum = 1;
Pos pos = 3;
}

//已换EmsgToss_GuideAskBornNpc
//协议名不一致eMsgToGsToCSFromGC_GuideSendNpc->eMsgToGSToSSFromGC_AskBornNPC
message AskBornNPC
{
	MsgNum msgnum = 1;
	int32 stepid = 2;
	int32 state = 3;
}
message AlwaysAutoAtk
{
MsgNum msgnum = 1;
bool flag = 2;
}

//eMsgToGSToSSFromGC_AskTrySelectHero
message TrySeleceHero
{
MsgNum msgnum = 1;
uint32 heroid = 2;
}

//eMsgToGSToSSFromGC_AskSelectHero
message SelectHero
{
MsgNum msgnum = 1;
int32 heroid = 2;
}

//eMsgToGSToSSFromGC_AskSelectRunePage
message SelectRunePage
{
MsgNum msgnum = 1;
int32 pageindex = 2;
}

//eMsgToGSToSSFromGC_ReportLoadBattleComplete
message LoadComplete
{
MsgNum msgnum = 1;
}